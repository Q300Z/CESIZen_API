# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "main","dev" ]

jobs:
  test:
      runs-on: ubuntu-latest
      services:
        postgres:
          image: postgres:16
          env:
            POSTGRES_USER: root
            POSTGRES_PASSWORD: 123456
            POSTGRES_DB: testing
          ports:
            - 5432:5432
          options: >-
            --health-cmd pg_isready
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5

      steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.2'

      - name: Use example .env
        run: cp .env.test .env

      - name: Generate Prisma Client Go
        run: go run github.com/steebchen/prisma-client-go db push --schema internal/database/prisma/schema.prisma

      - name: Test
        run: go test -v ./...
  build-docker:
    name: Build Docker Image
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    env:
      NODE_ENV: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
      TAG: ${{ github.ref == 'refs/heads/main' && 'latest' || 'dev' }}
      REGISTRY: ghcr.io
      IMAGE_NAME: q300z/cesizen-api

    concurrency:
      group: build-docker-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}
          build-args: NODE_ENV=${{ env.NODE_ENV }}
          cache-from: type=gha


      - name: Image pushed successfully
        run: echo "âœ… Image ${{ env.TAG }} pushed to ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"


    
  
