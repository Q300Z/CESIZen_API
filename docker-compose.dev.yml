services:
  front:
    image: ghcr.io/q300z/cesizen-vue:dev
    container_name: front-dev
    restart: unless-stopped
    labels:
      - "traefik.enable=true"  # Activer Traefik pour ce service
      - "traefik.http.routers.front.rule=Host(`cesizen-dev.qalpuch.cc`)"  # Règle de routage pour le service front
      - "traefik.http.routers.front.entrypoints=websecure"  # Utiliser le point d'entrée HTTPS
      - "traefik.http.routers.front.tls.certresolver=cloudflare"  # Utiliser le résolveur de certificats Cloudflare
      - "traefik.http.services.front.loadbalancer.server.port=80"  # Port interne du service front
    depends_on:
      api:
        required: true
        condition: service_healthy
    networks:
      - traefik  # Utiliser le réseau Traefik pour la communication entre les services

  api:
    image: ghcr.io/q300z/cesizen-api:dev
    container_name: api-dev
    restart: unless-stopped
    labels:
      - "traefik.enable=true"  # Activer Traefik pour ce service
      - "traefik.http.routers.api.rule=Host(`cesizen-api-dev.qalpuch.cc`)"  # Règle de routage pour le service front
      - "traefik.http.routers.api.entrypoints=websecure"  # Utiliser le point d'entrée HTTPS
      - "traefik.http.routers.api.tls.certresolver=cloudflare"  # Utiliser le résolveur de certificats Cloudflare
      - "traefik.http.services.api.loadbalancer.server.port=8080"  # Port interne du service API
      - "traefik.docker.network=traefik"  # Spécifier le réseau Traefik pour ce service
    environment:
      DB_HOST: db
      DB_PORT: ${DB_PORT}
      GIN_MODE: debug
    env_file:
      - .env.dev
    depends_on:
      db:
        required: true
        condition: service_healthy
    networks:
      - traefik  # Utiliser le réseau Traefik pour la communication entre les services
      - db # Utiliser le réseau de la base de données pour la communication
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/v1/version || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 15

  db:
    image: postgres:17.5-alpine3.22
    container_name: db-dev
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - db_dev:/var/lib/postgresql/data
    networks:
      - db # Utiliser le réseau de la base de données pour la communication
    healthcheck:
        test: ["CMD-SHELL", "pg_isready -d ${DB_NAME}"]
        interval: 10s
        timeout: 5s
        retries: 5

volumes:
  db_dev:
    driver: local

networks:
  db:
    name: db-dev
  traefik:
    external: true
